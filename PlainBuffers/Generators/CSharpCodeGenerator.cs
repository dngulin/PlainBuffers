using System;
using System.IO;
using PlainBuffers.CodeGen;
using PlainBuffers.CodeGen.Data;

namespace PlainBuffers.Generators {
  public class CSharpCodeGenerator : IGenerator {
    private const string Indent = "    ";

    private readonly string[] _namespaces;

    public CSharpCodeGenerator(string[] namespaces) => _namespaces = namespaces ?? Array.Empty<string>();

    public INamingChecker NamingChecker { get; } = new CSharpNamingChecker();

    public void Generate(CodeGenData data, TextWriter writer) {
      WriteHeader(writer);
      writer.WriteLine();

      if (_namespaces.Length > 0)
        WriteNamespaces(writer);

      writer.WriteLine("#pragma warning disable 649");
      writer.WriteLine();

      using (var nsBlock = new BlockWriter(writer, Indent, 0, $"namespace {data.NameSpace}")) {
        for (var i = 0; i < data.Types.Length; i++) {
          var typeInfo = data.Types[i];
          switch (typeInfo) {
            case CodeGenEnum enumInfo:
              WriteEnum(enumInfo, nsBlock);
              break;
            case CodeGenArray arrayInfo:
              WriteArray(arrayInfo, nsBlock);
              break;
            case CodeGenStruct structInfo:
              WriteStruct(structInfo, nsBlock);
              break;
            default:
              throw new Exception("Unknown data type");
          }

          if (i < data.Types.Length - 1)
            nsBlock.WriteLine();
        }
      }
    }

    protected virtual void WriteHeader(TextWriter writer) {
      writer.WriteLine("// This file is auto-generated by the PlainBuffers compiler");
      writer.WriteLine($"// Generated at {DateTimeOffset.Now:O}");
      writer.WriteLine();

      writer.WriteLine("// ReSharper disable All");
      writer.WriteLine();

      writer.WriteLine("using System;");
      writer.WriteLine("using System.Runtime.InteropServices;");
    }

    private void WriteNamespaces(TextWriter writer) {
      foreach (var ns in _namespaces)
        writer.WriteLine($"using {ns};");

      writer.WriteLine();
    }

    protected virtual void WriteEnum(CodeGenEnum enumType, in BlockWriter nsBlock) {
      if (enumType.IsFlags)
        nsBlock.WriteLine("[Flags]");

      using (var typeBlock = nsBlock.Sub($"public enum {enumType.Name} : {enumType.UnderlyingType}")) {
        for (var i = 0; i < enumType.Items.Length; i++) {
          var item = enumType.Items[i];
          var comma = i < enumType.Items.Length - 1 ? "," : string.Empty;

          typeBlock.WriteLine($"{item.Name} = {item.Value}{comma}");
        }
      }
    }

    protected virtual void WriteArray(CodeGenArray arrayType, in BlockWriter nsBlock) {
      using (var typeBlock = nsBlock.Sub($"public unsafe struct {arrayType.Name}")) {
        typeBlock.WriteLine($"public const int SizeOf = {arrayType.Size};");
        typeBlock.WriteLine($"public const int Length = {arrayType.Length};");
        typeBlock.WriteLine();
        typeBlock.WriteLine("private fixed byte _buffer[SizeOf];");

        var itemType = arrayType.ItemType;

        typeBlock.WriteLine();
        using (var wdBlock = typeBlock.Sub("public void WriteDefault()"))
        using (var forBlock = wdBlock.Sub("for (var i = 0; i < Length; i++)")) {
          PutWriteDefaultLine(forBlock, "this[i]", itemType, arrayType.ItemDefaultValueInfo);
        }

        typeBlock.WriteLine();
        using (var idxBlock = typeBlock.Sub($"public ref {itemType} this[int index]"))
        using (var getBlock = idxBlock.Sub("get")) {
          getBlock.WriteLine($"if (index < 0 || sizeof({itemType}) * index >= SizeOf) throw new IndexOutOfRangeException();");
          getBlock.WriteLine("return ref At(index);");
        }

        typeBlock.WriteLine();
        using (var atBlock = typeBlock.Sub($"private ref {itemType} At(int index)")) {
          using (var retBlock = atBlock.Sub("fixed (byte* __ptr = _buffer)")) {
            retBlock.WriteLine($"return ref *(({itemType}*)__ptr + index);");
          }
        }

        typeBlock.WriteLine();
        WriteArrayEnumerator(arrayType.Name, itemType, typeBlock);

        typeBlock.WriteLine();
        WriteEqualityOperators(arrayType.Name, typeBlock);
      }
    }

    private static void WriteArrayEnumerator(string arrayType, string item, BlockWriter arrayBlock) {
      var enumeratorType = $"_EnumeratorOf{arrayType}";
      arrayBlock.WriteLine($"public {enumeratorType} GetEnumerator() => new {enumeratorType}(ref this);");

      arrayBlock.WriteLine();
      using (var enumeratorBlock = arrayBlock.Sub($"public unsafe ref struct {enumeratorType}")) {
        enumeratorBlock.WriteLine($"private readonly {arrayType}* _arrayPtr;");
        enumeratorBlock.WriteLine("private int _index;");

        enumeratorBlock.WriteLine();
        using (var ctorBlock = enumeratorBlock.Sub($"public {enumeratorType}(ref {arrayType} array)")) {
          ctorBlock.WriteLine($"fixed ({arrayType}* arrayPtr = &array) _arrayPtr = arrayPtr;");
          ctorBlock.WriteLine("_index = -1;");
        }

        enumeratorBlock.WriteLine();
        enumeratorBlock.WriteLine("public bool MoveNext() => ++_index < Length;");
        enumeratorBlock.WriteLine($"public ref {item} Current => ref (*_arrayPtr).At(_index);");

        enumeratorBlock.WriteLine();
        enumeratorBlock.WriteLine("public void Reset() => _index = -1;");
        enumeratorBlock.WriteLine("public void Dispose() {}");
      }
    }

    protected virtual void WriteStruct(CodeGenStruct structType, in BlockWriter nsBlock) {
      nsBlock.WriteLine("[StructLayout(LayoutKind.Explicit)]");
      using (var typeBlock = nsBlock.Sub($"public unsafe struct {structType.Name}")) {
        typeBlock.WriteLine($"public const int SizeOf = {structType.Size};");

        if (structType.Padding != 0)
          typeBlock.WriteLine($"private const int _Padding = {structType.Padding};");

        typeBlock.WriteLine();
        typeBlock.WriteLine("[FieldOffset(0)] private fixed byte _buffer[SizeOf];");

        typeBlock.WriteLine();
        foreach (var field in structType.Fields) {
          typeBlock.WriteLine($"[FieldOffset({field.Offset})] public {field.Type} {field.Name};");
        }

        typeBlock.WriteLine();
        using (var wdBlock = typeBlock.Sub("public void WriteDefault()")) {
          foreach (var field in structType.Fields) {
            PutWriteDefaultLine(wdBlock, field.Name, field.Type, field.DefaultValueInfo);
          }

          if (structType.Padding != 0)
            WritePaddingFiller(wdBlock);
        }

        typeBlock.WriteLine();
        WriteEqualityOperators(structType.Name, typeBlock);
      }
    }

    protected virtual void WriteEqualityOperators(string type, in BlockWriter typeBlock) {
      using (var eqBlock = typeBlock.Sub($"public static bool operator ==(in {type} l, in {type} r)")) {
        eqBlock.WriteLine("fixed (byte* __l = l._buffer)");
        using (var rFxd = eqBlock.Sub("fixed (byte* __r = r._buffer)")) {
          rFxd.WriteLine("return new Span<byte>(__l, SizeOf).SequenceEqual(new Span<byte>(__r, SizeOf));");
        }
      }

      typeBlock.WriteLine($"public static bool operator !=(in {type} l, in {type} r) => !(l == r);");
      typeBlock.WriteLine();
      typeBlock.WriteLine($"public override bool Equals(object obj) => obj is {type} casted && this == casted;");
      typeBlock.WriteLine("public override int GetHashCode() => throw new NotSupportedException();");
    }

    protected virtual void WritePaddingFiller(in BlockWriter writeDefaultBlock)
    {
      using (var fxdBlock = writeDefaultBlock.Sub("fixed (byte* __ptr = _buffer)")) {
        fxdBlock.WriteLine("new Span<byte>(__ptr + (SizeOf - _Padding), _Padding).Fill(0);");
      }
    }

    private static void PutWriteDefaultLine(BlockWriter block, string lhs, string type, in DefaultValueInfo valInfo) {
      switch (valInfo.Variant) {
        case DefaultValueVariant.WriteZeroes:
          block.WriteLine($"{lhs} = default;");
          break;
        case DefaultValueVariant.AssignValue:
          block.WriteLine($"{lhs} = {valInfo.Identifier};");
          break;
        case DefaultValueVariant.AssignTypeMember:
          block.WriteLine($"{lhs} = {type}.{valInfo.Identifier};");
          break;
        case DefaultValueVariant.CallWriteDefaultMethod:
          block.WriteLine($"{lhs}.WriteDefault();");
          break;
        default:
          throw new ArgumentOutOfRangeException();
      }
    }
  }
}