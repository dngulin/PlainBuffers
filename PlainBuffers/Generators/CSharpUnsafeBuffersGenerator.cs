using System;
using System.Collections.Generic;
using System.IO;
using PlainBuffers.CodeGen;
using PlainBuffers.CodeGen.Data;

namespace PlainBuffers.Generators {
  public class CSharpUnsafeBuffersGenerator : CSharpAbstractGenerator {
    public CSharpUnsafeBuffersGenerator(string[] namespaces) : base(namespaces) { }

    protected override void WriteHeader(TextWriter writer) {
      writer.WriteLine("// This file is auto-generated by the PlainBuffers compiler");
      writer.WriteLine($"// Generated at {DateTimeOffset.Now:O}");
      writer.WriteLine();

      writer.WriteLine("// ReSharper disable All");
      writer.WriteLine();

      writer.WriteLine("using System;");
      writer.WriteLine();
    }

    protected override void WriteEnum(CodeGenEnum enumType, in BlockWriter nsBlock, HashSet<string> valueTypes) {
      if (enumType.IsFlags)
        nsBlock.WriteLine("[Flags]");

      using (var typeBlock = nsBlock.Sub($"public enum {enumType.Name} : {enumType.UnderlyingType}")) {
        for (var i = 0; i < enumType.Items.Length; i++) {
          var item = enumType.Items[i];
          var comma = i < enumType.Items.Length - 1 ? "," : string.Empty;

          typeBlock.WriteLine($"{item.Name} = {item.Value}{comma}");
        }
      }

      valueTypes.Add(enumType.Name);
    }

    protected override void WriteArray(CodeGenArray arrayType, in BlockWriter nsBlock, HashSet<string> valueTypes) {
      using (var typeBlock = nsBlock.Sub($"public readonly unsafe ref struct {arrayType.Name}")) {
        typeBlock.WriteLine($"public const int SizeOf = {arrayType.Size};");
        typeBlock.WriteLine($"public const int Length = {arrayType.Length};");

        typeBlock.WriteLine();
        WriteConstructor(arrayType.Name, typeBlock);

        var itemType = arrayType.ItemType;
        var isValueType = valueTypes.Contains(itemType);

        typeBlock.WriteLine();
        WriteCopyToMethod(arrayType.Name, typeBlock);

        typeBlock.WriteLine();
        using (var wdBlock = typeBlock.Sub("public void WriteDefault()"))
        using (var forBlock = wdBlock.Sub("for (var i = 0; i < Length; i++)")) {
          PutWriteDefaultLine(forBlock, "this[i]", itemType, arrayType.ItemDefaultValueInfo);
        }

        typeBlock.WriteLine();
        using (var idxBlock = typeBlock.Sub(isValueType ?
          $"public ref {itemType} this[int index]" :
          $"public {itemType} this[int index]"))
        using (var getBlock = idxBlock.Sub("get")) {
          var sizeExpr = isValueType ? $"sizeof({itemType})" : $"{itemType}.SizeOf";
          getBlock.WriteLine($"if (index < 0 || {sizeExpr} * index >= SizeOf) throw new IndexOutOfRangeException();");
          getBlock.WriteLine(isValueType
            ? $"return ref *(({itemType}*)_ptr + index);"
            : $"return new {itemType}(_ptr);");
        }

        typeBlock.WriteLine();
        typeBlock.WriteLine(isValueType
          ? $"private ref {itemType} At(int index) => ref *(({itemType}*)_ptr + index);"
          : $"private {itemType} At(int index) => new {itemType}(_ptr);");

        typeBlock.WriteLine();
        WriteArrayEnumerator(arrayType.Name, itemType, typeBlock, isValueType);

        typeBlock.WriteLine();
        WriteEqualityOperators(arrayType.Name, typeBlock);
      }
    }

    private static void WriteArrayEnumerator(string array, string item, BlockWriter arrayBlock, bool itemIsValueType) {
      var enumeratorType = $"_EnumeratorOf{array}";
      arrayBlock.WriteLine($"public {enumeratorType} GetEnumerator() => new {enumeratorType}(this);");

      arrayBlock.WriteLine();
      using (var enumeratorBlock = arrayBlock.Sub($"public ref struct {enumeratorType}")) {
        enumeratorBlock.WriteLine($"private readonly {array} _array;");
        enumeratorBlock.WriteLine("private int _index;");

        enumeratorBlock.WriteLine();
        using (var ctorBlock = enumeratorBlock.Sub($"public {enumeratorType}({array} array)")) {
          ctorBlock.WriteLine("_array = array;");
          ctorBlock.WriteLine("_index = -1;");
        }

        enumeratorBlock.WriteLine();
        enumeratorBlock.WriteLine("public bool MoveNext() => ++_index < Length;");
        enumeratorBlock.WriteLine(itemIsValueType
          ? $"public ref {item} Current => ref _array.At(_index);"
          : $"public {item} Current => _array.At(_index);");

        enumeratorBlock.WriteLine();
        enumeratorBlock.WriteLine("public void Reset() => _index = -1;");
        enumeratorBlock.WriteLine("public void Dispose() {}");
      }
    }

    protected override void WriteStruct(CodeGenStruct structType, in BlockWriter nsBlock, HashSet<string> valueTypes) {
      using (var typeBlock = nsBlock.Sub($"public readonly unsafe ref struct {structType.Name}")) {
        typeBlock.WriteLine($"public const int SizeOf = {structType.Size};");

        if (structType.Padding != 0)
          typeBlock.WriteLine($"private const int _Padding = {structType.Padding};");

        typeBlock.WriteLine();
        WriteConstructor(structType.Name, typeBlock);

        typeBlock.WriteLine();
        foreach (var field in structType.Fields) {
          var isValueType = valueTypes.Contains(field.Type);
          typeBlock.WriteLine(isValueType?
            $"public ref {field.Type} {field.Name} => ref *(({field.Type}*)(_ptr + {field.Offset}));" :
            $"public {field.Type} {field.Name} => new {field.Type}(_ptr + {field.Offset});");
        }

        typeBlock.WriteLine();
        WriteCopyToMethod(structType.Name, typeBlock);

        typeBlock.WriteLine();
        using (var wdBlock = typeBlock.Sub("public void WriteDefault()")) {
          foreach (var field in structType.Fields) {
            PutWriteDefaultLine(wdBlock, field.Name, field.Type, field.DefaultValueInfo);
          }

          if (structType.Padding != 0) {
            wdBlock.WriteLine("GetBuffer().Slice(SizeOf - _Padding, _Padding).Fill(0);");
          }
        }

        typeBlock.WriteLine();
        WriteEqualityOperators(structType.Name, typeBlock);
      }
    }

    private static void WriteConstructor(string type, BlockWriter typeBlock) {
      typeBlock.WriteLine("private readonly byte* _ptr;");
      typeBlock.WriteLine("public Span<byte> GetBuffer() => new Span<byte>(_ptr, SizeOf);");

      typeBlock.WriteLine();
      typeBlock.WriteLine($"public {type}(byte* ptr) => _ptr = ptr;");

      typeBlock.WriteLine();
      using (var wrapBlock = typeBlock.Sub($"public static {type} WrapBuffer(byte* buffer, int bufferSize, int myIndex = 0)")) {
        const string msg = "\"Buffer size is too small!\"";
        wrapBlock.WriteLine("var offset = SizeOf * myIndex;");
        wrapBlock.WriteLine($"if ((bufferSize - offset) < SizeOf) throw new InvalidOperationException({msg});");
        wrapBlock.WriteLine($"return new {type}(buffer + offset);");
      }
    }

    private static void WriteCopyToMethod(string type, BlockWriter typeBlock) {
      typeBlock.WriteLine($"public void CopyTo({type} other) => GetBuffer().CopyTo(other.GetBuffer());");
    }

    private static void WriteEqualityOperators(string type, in BlockWriter typeBlock) {
      typeBlock.WriteLine($"public static bool operator ==({type} l, {type} r) => l.GetBuffer().SequenceEqual(r.GetBuffer());");
      typeBlock.WriteLine($"public static bool operator !=({type} l, {type} r) => !l.GetBuffer().SequenceEqual(r.GetBuffer());");
      typeBlock.WriteLine();
      typeBlock.WriteLine("public override bool Equals(object obj) => false;");
      typeBlock.WriteLine("public override int GetHashCode() => throw new NotSupportedException();");
    }
  }
}